#!/bin/sh

set -e

# Get LANG
. /etc/default/locale
export LANG

# Initialize gettext support
. gettext.sh
TEXTDOMAIN="tails"
export TEXTDOMAIN

#####################################
I2PPROFILE="/var/lib/i2p/i2p-config"
I2PTUNNEL="$I2PPROFILE/i2ptunnel.config"

# It usually takes I2P around 3 minutes to bootstrap and be ready for use.
# For this reason we wait $WAIT seconds before checking its status
# because it's practically a certainty that I2P will not be ready earlier.
WAIT=180

get_eep() {
    # We retrieve the host and port number from the I2P profile
    # This shouldn't be anywhere other than 127.0.0.1:4444
    # but in case someone modifies the hook scripts or the default changes in I2P,
    # this check should still work
    LISTENHOST=$(awk -F= '/^tunnel\.0\.interface/{print $2}' "$I2PTUNNEL")
    LISTENPORT=$(awk -F= '/^tunnel\.0\.listenPort/{print $2}' "$I2PTUNNEL")
    echo ${LISTENHOST}:${LISTENPORT}
}

announce_success() {
    /usr/local/sbin/tails-notify-user \
        "`gettext \"I2P is ready\"`" \
        "`gettext \"You can now access services on I2P.\"`"
        exit 0
}

fail() {
    /usr/local/sbin/tails-notify-user \
        "`gettext \"I2P is not ready\"`" \
        "`gettext \"Eepsite tunnel not built within six minutes. Check the router console at http://127.0.0.1:7657 within I2P Browser or the logs in /var/log/i2p for more information.\"`"
        exit 0
}

i2p_is_ready() {
    netstat -4nlp |grep -qw `get_eep`
}

monitor() {
    # Exit if I2P isn't running
    [ -e /run/i2p/i2p.pid ] || exit 0
    # We'll give up once 6 (180 seconds * 2) minutes have passed. Even with
    # ridiculously subpar network conditions I've not seen bootstrapping take
    # longer than this.

    # We'll first wait 3 minutes before checking if port 4444 is ready.
    sleep $WAIT
    local COUNT=0
    until i2p_is_ready; do
        # Check every 10 seconds if port 4444 is ready, but only for three more minutes.
        # If not open within 6 minutes (in total), advise to check the router console and/or logs.
        if [ $COUNT -ge $WAIT ]; then
            fail
        fi
        sleep 10
        COUNT=$(expr $COUNT + 10)
    done
}

monitor
# If we get here, I2P should be ready.
announce_success
exit 0
